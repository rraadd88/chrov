# AUTOGENERATED! DO NOT EDIT! File to edit: ../../modules_nbs/plot_mat.ipynb.

# %% auto 0
__all__ = ['plot_tri']

# %% ../../modules_nbs/plot_mat.ipynb 2
import matplotlib.pyplot as plt
import numpy as np
from scipy.ndimage import gaussian_filter
import seaborn as sns

def plot_tri(
    df,
    ax=None,
    max_dist=None,
    proportional=True,
    rasterized=True,
    smoothing_sigma=None,
    show_x=False,
    **kws_pcolormesh,
    ):
    """
    Plot a triangular heatmap for a given adjacency matrix.

    :param df: pandas DataFrame containing the adjacency matrix
    :param ax: matplotlib Axes object to plot on
    :param max_dist: Only draw interactions up to this distance
    :param proportional: Automatically determine aspect ratio of plot so that x- and y-axis are proportional. Default: True
    :param rasterized: Draw map as image (True) or vector graphic (False). Default: True
    :param smoothing_sigma: Sigma parameter for Gaussian smoothing. Default: None (no smoothing)
    """
    if ax is None:
        ax = plt.gca()

    matrix = df.values

    if smoothing_sigma:
        matrix = gaussian_filter(matrix, sigma=smoothing_sigma)

    bin_coords = np.arange(matrix.shape[0] + 1)
    bin_coords = np.true_divide(bin_coords, np.sqrt(2))
    x, y = np.meshgrid(bin_coords, bin_coords)
    sin45 = np.sin(np.radians(45))
    x_, y_ = x * sin45 + y * sin45, x * sin45 - y * sin45

    aspect = .5 if max_dist is None else .5 * min(max_dist, matrix.shape[0]) / matrix.shape[0]
    ax.set_aspect(aspect if proportional else 'auto')

    ax.pcolormesh(
        x_, y_, matrix, rasterized=rasterized,
        **kws_pcolormesh,
    )
    ax.set_ylim(0, max_dist / 2 if max_dist else matrix.shape[0] / 2)
    ax.set_yticks([])
    sns.despine(
        ax=ax,
        top=True,
        bottom=not show_x,
        right=True,
        left=True
    )
    if show_x:
        ax.set(
            xticks= (np.arange(1,len(df)+1,1)-0.5),
            xticklabels= df.columns.tolist(),
        )
    else:
        ax.set(
            xticks=[],
        )
    ax.patch.set_visible(False)
    # plt.show()
    return ax
